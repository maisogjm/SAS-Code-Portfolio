******************************************************************************;
******************************************************************************;
*** SAS program to run unadjusted and adjusted models, by intercourse pattern
*** on fertile days -2, -1, and 0.
***
*** Version2: Read in permutation data generated by the SAS program
*** Make 10000 Permuted Data Sets for Excluded Subjects - v1.022315.sas
*** Then run modeling on each of the 10000 permutations. Heavily based on
*** the SAS program
*** Run Unadjusted and Adjusted Models by Intercourse Pattern on Fertile Days -1 and 0 - v6.022315.sas
***
*** Version 1: very heavily based on the SAS program
*** Run Unadjusted and Adjusted Models by Intercourse Pattern on Fertile Days -1 and 0 - v5.112614.sas
******************************************************************************;
******************************************************************************;

%let VERSION        = v1;
%let DATESTR        = 022415;
%let OUTPUT_FOLDER  = Output-02-24-15;
%let INPUT_FOLDER   = N:/DIPHRData/LIFE/Fertile Window and Pattern of Intercourse/Data/Intercourse Pattern Study For Enrique;
%let PERMUTE_DAT    = permutations_10k_v1_022315;
%let MACRO_FOLDER   = C:/Users/maisogjm/Documents/GLOTECH/SAS Utility Macros;
%let PATTERN_FOLDER = C:/Documents and Settings/maisogjm/My Documents/LIFE/Data Quality/Time To Loss/Intercourse Pattern Study For Enrique;

libname inlib  "&INPUT_FOLDER";
libname outlib "&PATTERN_FOLDER/&OUTPUT_FOLDER";

******************************************************************************;
******************************************************************************;
*** Load utility macros.
******************************************************************************;
******************************************************************************;

%let MACRO_FOLDER = C:/Users/maisogjm/Documents/GLOTECH/SAS Utility Macros;
filename macdef "&MACRO_FOLDER/Utility Macros - v47.011515.sas";
%include macdef;

******************************************************************************;
******************************************************************************;
*** Load data.
******************************************************************************;
******************************************************************************;

proc format;
    value $ MENSRGFMT
        "1" = "1 - Regular"
        "2" = "2 - NotRegular"
        "3" = "3 - ItVaries";
    value $ NOYES
        "0" = "0 - No"
        "1" = "1 - Yes";
    value $ INCOME_FMT
        'a' ='a - Less than $10,000 (less than $833 per month)'
        'b' ='b - $10,000-$19,999 ($833-$1,666 per month)'
        'c' ='c - $20,000-$29,999 ($1,667-$2,499 per month)'
        'd' ='d - $30,000-$39,999 ($2,500-$3,332 per month)'
        'e' ='e - $40,000-$49,999 ($3,333-$4,166 per month)'
        'f' ='f - $50,000-$59,999 ($4,167-$4,999 per month)'
        'g' ='g - $60,000-$69,999 ($5,000-$5,832 per month)'
        'h' ='h - $70,000-$79,999 ($5,833-$6,666 per month)'
        'i' ='i - $80,000-$89,999 ($6,667-$7,499 per month)'
        'j' ='j - $90,000-$99,999 ($7,500-$8,332 per month)'
        'k' ='k - $100,000 or over ($8,333 and over per month)';
    value $ EDU_FMT
        '1' ='1-Less than high school graduate'
        '2' ='2-High school graduate/GED'
        '3' ='3-Some college or technical school'
        '4' ='4-College graduate or higher';
    value AGECATFMT
        1 = '<=29'
        2 = '30-34'
        3 = '35-39'
        4 = '>=40';
    value $ BMIFMT
        '1' = 'Under/healthy <= 24.9'
        '2' = 'Overweight 25.0 – 29.9'
        '3' = 'Obese >= 30';
    value RACEFMT
        1 ='1-Non-Hispanic White'
        2 ='2-Non-Hispanic Black'
        3 ='3-Hispanic'
        4 ='4-Other';
    value EDU2FMT
        1 ='1- High school or below'
        2 ='2-Some college or above'
        3 ='3-Some college or above';
    value INCOFMT
        1 ='1- < 50K'
        2 ='2- 50K - 99999'
        3 ='3- 100K and above';
    value CONDPARFMT
        0 = '0 - Gravidity = 0, Parity = 0'
        1 = '1 - Gravidity > 0, Parity = 0'
        2 = '2 - Gravidity > 0, Parity > 0';
    value NOYESNUMFMT
        0 = '0-No'
        1 = '1-Yes';
    value $ NUMACTSINTERCOURSEF
        '0' = '0-# Acts of Intercourse = 0'
        '1' = '1-# Acts of Intercourse = 1'
        '2' = '2-# Acts of Intercourse = 2-4'
        '3' = '3-# Acts of Intercourse > 4 ';
run;

*** SAS Data Set Permutations501_dat
*** Number of observations              = 23480000
*** Number of unique occurences of spid = 501
*** Maximum number of repeats of spid   = 160000;
data Permutations501_dat;
    set inlib.&PERMUTE_DAT;
run;
%CountUniqueVals(inputData=Permutations501_dat,vrbl=spid);

******************************************************************************;
******************************************************************************;
*** Widen data.
******************************************************************************;
******************************************************************************;

*** The data was already sorted before saving to disk, so no need to sort.;
/*
proc sort data=Permutations501_dat; by _PERMUTATION_ spid method5; run;
*/

*** SAS Data Set cycle_level_dat_wide
*** Number of observations              = 5010000
*** Number of unique occurences of spid = 501
*** Maximum number of repeats of spid   = 10000;
data cycle_level_dat_wide;
    retain spid IP000_0-IP000_15
                IP001_0-IP001_15
                IP010_0-IP010_15
                IP100_0-IP100_15
                IP101_0-IP101_15
                IP110_0-IP110_15
                IP111_0-IP111_15;
    set Permutations501_dat;
    by _PERMUTATION_ spid;
    array IP000array[*] IP000_0-IP000_15;
    array IP001array[*] IP001_0-IP001_15;
    array IP010array[*] IP010_0-IP010_15;
    array IP100array[*] IP100_0-IP100_15;
    array IP101array[*] IP101_0-IP101_15;
    array IP110array[*] IP110_0-IP110_15;
    array IP111array[*] IP111_0-IP111_15;

    *** Initialize.;
    if ( first.spid ) then do i=1 to 15;
        IP000array[i] = 0;
        IP001array[i] = 0;
        IP010array[i] = 0;
        IP100array[i] = 0;
        IP101array[i] = 0;
        IP110array[i] = 0;
        IP111array[i] = 0;
    end;

    *** Set values.;
    if      ( threeDayIntercoursePattern = '000' ) then IP000array[method5+1] = 1;
    else if ( threeDayIntercoursePattern = '001' ) then IP001array[method5+1] = 1;
    else if ( threeDayIntercoursePattern = '010' ) then IP010array[method5+1] = 1;
    else if ( threeDayIntercoursePattern = '100' ) then IP100array[method5+1] = 1;
    else if ( threeDayIntercoursePattern = '101' ) then IP101array[method5+1] = 1;
    else if ( threeDayIntercoursePattern = '110' ) then IP110array[method5+1] = 1;
    else if ( threeDayIntercoursePattern = '111' ) then IP111array[method5+1] = 1;

    *** Output;
    if ( last.spid ) then output;

    keep _PERMUTATION_ spid nttp status1 nummths zerocyc
         IP000_0-IP000_15
         IP001_0-IP001_15
         IP010_0-IP010_15
         IP100_0-IP100_15
         IP101_0-IP101_15
         IP110_0-IP110_15
         IP111_0-IP111_15
         EducationCat_m bmiCat_f bmiCat_m Age_AVG Age_DIFF;
run;
%CountUniqueVals(inputData=cycle_level_dat_wide,vrbl=spid);

*** Delete temporary data set(s).;
proc datasets nolist;
    delete Permutations501_dat;
run;
quit;

******************************************************************************;
******************************************************************************;
*** Run models.
***
*** Version 3 (11/10/2014): Adapting code from the SAS program
*** Call to PROC PHREG With Time-Varying Covariates AND Left Truncation - v1.031913.sas
******************************************************************************;
******************************************************************************;

options nonotes;

*** Unadjusted.;
ods select none;
proc phreg data=cycle_level_dat_wide;
    title 'Unadjusted';
    model nttp*status1(0) = Intercourse000 Intercourse001 Intercourse010
                            Intercourse100 Intercourse101 Intercourse110 Intercourse111
                            / entry=nummths ties=discrete risklimits;
    by _PERMUTATION_;
    array IP000array[*] IP000_0-IP000_15;
    array IP001array[*] IP001_0-IP001_15;
    array IP010array[*] IP010_0-IP010_15;
    array IP100array[*] IP100_0-IP100_15;
    array IP101array[*] IP101_0-IP101_15;
    array IP110array[*] IP110_0-IP110_15;
    array IP111array[*] IP111_0-IP111_15;
    array tt{*}        t0-t16;

    t0  = 0;      t1 = 1;      t2  = 2;      t3  = 3;      t4  = 4;      t5  = 5; 
    t5  = 5;      t6 = 6;      t7  = 7;      t8  = 8;      t9  = 9;      t10 = 10;
    t11 = 11;    t12 = 12;     t13 = 13;     t14 = 14;      t15 = 15;    t16 = 16;

    ****************;
    *** ZEROCYC = 0.;
    ****************;
    if ( zerocyc = 0 ) then do;
        *** Address left-sided missingness;
        if ( nttp <= tt[1] + nummths ) then do;
            Intercourse000 = IP000_0;
            Intercourse001 = IP001_0;
            Intercourse010 = IP010_0;
            Intercourse100 = IP100_0;
            Intercourse101 = IP101_0;
            Intercourse110 = IP110_0;
            Intercourse111 = IP111_0;
        end;

        *** Address right-sided missingness.;
        if ( nttp >= tt[16] + nummths ) then do;
            Intercourse000 = IP000_15;
            Intercourse001 = IP001_15;
            Intercourse010 = IP010_15;
            Intercourse100 = IP100_15;
            Intercourse101 = IP101_15;
            Intercourse110 = IP110_15;
            Intercourse111 = IP111_15;
        end;

        *** Shift arrays by NUMMTHS.;
        do i=1 to dim(IP000array);
            if ( ( tt[i] + nummths) <= nttp < ( tt[i+1] + nummths) ) then do;
                Intercourse000 = IP000array[i];
                Intercourse001 = IP001array[i];
                Intercourse010 = IP010array[i];
                Intercourse100 = IP100array[i];
                Intercourse101 = IP101array[i];
                Intercourse110 = IP110array[i];
                Intercourse111 = IP111array[i];
            end;
        end;
    end;

    ****************;
    *** ZEROCYC = 1.;
    ****************;
    if ( zerocyc = 1 ) then do;
        *** Address left-sided missingness.;
        if ( nttp <= tt[1] + nummths + 1 ) then do;
            Intercourse000 = IP000_0;
            Intercourse001 = IP001_0;
            Intercourse010 = IP010_0;
            Intercourse100 = IP100_0;
            Intercourse101 = IP101_0;
            Intercourse110 = IP110_0;
            Intercourse111 = IP111_0;
        end;

        *** Address right-sided missingness.;
        if ( nttp >= tt[17] + nummths + 1 ) then do;
            Intercourse000 = IP000_15;
            Intercourse001 = IP001_15;
            Intercourse010 = IP010_15;
            Intercourse100 = IP100_15;
            Intercourse101 = IP101_15;
            Intercourse110 = IP110_15;
            Intercourse111 = IP111_15;
        end;

        *** Shift arrays by NUMMTHS.;
        do i=1 to dim(IP000array);
            if ( ( tt[i] + nummths + 1 ) <= nttp < ( tt[i+1] + nummths + 1 ) ) then do;
                Intercourse000 = IP000array[i];
                Intercourse001 = IP001array[i];
                Intercourse010 = IP010array[i];
                Intercourse100 = IP100array[i];
                Intercourse101 = IP101array[i];
                Intercourse110 = IP110array[i];
                Intercourse111 = IP111array[i];
            end;
        end;
    end;
    label Intercourse000 = "Three-Day Intercourse Pattern 000"
          Intercourse001 = "Three-Day Intercourse Pattern 001"
          Intercourse010 = "Three-Day Intercourse Pattern 010"
          Intercourse100 = "Three-Day Intercourse Pattern 100"
          Intercourse101 = "Three-Day Intercourse Pattern 101"
          Intercourse110 = "Three-Day Intercourse Pattern 110"
          Intercourse111 = "Three-Day Intercourse Pattern 111";
    ods output GlobalTests        = GlobalTests_UnAdj_tall
               ParameterEstimates = ParameterEstimates_UnAdj_tall
               Nobs               = Nobs_Unadj;
run;
ods select all;

*** Adjusted.;
ods select none;
proc phreg data=cycle_level_dat_wide;
    class bmiCat_f bmiCat_m;
    title 'Adjusted';
    model nttp*status1(0) = Intercourse000 Intercourse001 Intercourse010
                            Intercourse100 Intercourse101 Intercourse110 Intercourse111
                            EducationCat_m bmiCat_f bmiCat_m Age_AVG Age_DIFF
                            / entry=nummths ties=discrete risklimits;
    by _PERMUTATION_;
    array IP000array[*] IP000_0-IP000_15;
    array IP001array[*] IP001_0-IP001_15;
    array IP010array[*] IP010_0-IP010_15;
    array IP100array[*] IP100_0-IP100_15;
    array IP101array[*] IP101_0-IP101_15;
    array IP110array[*] IP110_0-IP110_15;
    array IP111array[*] IP111_0-IP111_15;
    array tt{*}        t0-t16;

    t0  = 0;      t1 = 1;      t2  = 2;      t3  = 3;      t4  = 4;      t5  = 5; 
    t5  = 5;      t6 = 6;      t7  = 7;      t8  = 8;      t9  = 9;      t10 = 10;
    t11 = 11;    t12 = 12;     t13 = 13;     t14 = 14;      t15 = 15;    t16 = 16;

    ****************;
    *** ZEROCYC = 0.;
    ****************;
    if ( zerocyc = 0 ) then do;
        *** Address left-sided missingness;
        if ( nttp <= tt[1] + nummths ) then do;
            Intercourse000 = IP000_0;
            Intercourse001 = IP001_0;
            Intercourse010 = IP010_0;
            Intercourse100 = IP100_0;
            Intercourse101 = IP101_0;
            Intercourse110 = IP110_0;
            Intercourse111 = IP111_0;
        end;

        *** Address right-sided missingness.;
        if ( nttp >= tt[16] + nummths ) then do;
            Intercourse000 = IP000_15;
            Intercourse001 = IP001_15;
            Intercourse010 = IP010_15;
            Intercourse100 = IP100_15;
            Intercourse101 = IP101_15;
            Intercourse110 = IP110_15;
            Intercourse111 = IP111_15;
        end;

        *** Shift arrays by NUMMTHS.;
        do i=1 to dim(IP000array);
            if ( ( tt[i] + nummths) <= nttp < ( tt[i+1] + nummths) ) then do;
                Intercourse000 = IP000array[i];
                Intercourse001 = IP001array[i];
                Intercourse010 = IP010array[i];
                Intercourse100 = IP100array[i];
                Intercourse101 = IP101array[i];
                Intercourse110 = IP110array[i];
                Intercourse111 = IP111array[i];
            end;
        end;
    end;

    ****************;
    *** ZEROCYC = 1.;
    ****************;
    if ( zerocyc = 1 ) then do;
        *** Address left-sided missingness.;
        if ( nttp <= tt[1] + nummths + 1 ) then do;
            Intercourse000 = IP000_0;
            Intercourse001 = IP001_0;
            Intercourse010 = IP010_0;
            Intercourse100 = IP100_0;
            Intercourse101 = IP101_0;
            Intercourse110 = IP110_0;
            Intercourse111 = IP111_0;
        end;

        *** Address right-sided missingness.;
        if ( nttp >= tt[17] + nummths + 1 ) then do;
            Intercourse000 = IP000_15;
            Intercourse001 = IP001_15;
            Intercourse010 = IP010_15;
            Intercourse100 = IP100_15;
            Intercourse101 = IP101_15;
            Intercourse110 = IP110_15;
            Intercourse111 = IP111_15;
        end;

        *** Shift arrays by NUMMTHS.;
        do i=1 to dim(IP000array);
            if ( ( tt[i] + nummths + 1 ) <= nttp < ( tt[i+1] + nummths + 1 ) ) then do;
                Intercourse000 = IP000array[i];
                Intercourse001 = IP001array[i];
                Intercourse010 = IP010array[i];
                Intercourse100 = IP100array[i];
                Intercourse101 = IP101array[i];
                Intercourse110 = IP110array[i];
                Intercourse111 = IP111array[i];
            end;
        end;
    end;
    label Intercourse000 = "Three-Day Intercourse Pattern 000"
          Intercourse001 = "Three-Day Intercourse Pattern 001"
          Intercourse010 = "Three-Day Intercourse Pattern 010"
          Intercourse100 = "Three-Day Intercourse Pattern 100"
          Intercourse101 = "Three-Day Intercourse Pattern 101"
          Intercourse110 = "Three-Day Intercourse Pattern 110"
          Intercourse111 = "Three-Day Intercourse Pattern 111";
    ods output GlobalTests        = GlobalTests_Adj_tall
               ParameterEstimates = ParameterEstimates_Adj_tall
               Nobs               = Nobs_Adj;
run;
ods select all;

options notes;

*** Delete temporary data set(s).;
proc datasets nolist;
    delete cycle_level_dat_wide;
run;
quit;

******************************************************************************;
******************************************************************************;
*** Widen and merge the results.
******************************************************************************;
******************************************************************************;

***************************************;
*** Unadjusted.
***************************************;

data GlobalTests_UnAdj_wide;
    length _PERMUTATION_ 8.;
    retain pValueGlobal_LR_Unadj pValueGlobal_Score_Unadj pValueGlobal_Wald_Unadj;
    set GlobalTests_UnAdj_tall;
    by _PERMUTATION_;

    *** Initialize.;
    if ( first._PERMUTATION_ ) then do;
        pValueGlobal_LR_Unadj    = .;
        pValueGlobal_Score_Unadj = .;
        pValueGlobal_Wald_Unadj  = .;
    end;

    *** Set values.;
    if ( Test = "Likelihood Ratio" ) then pValueGlobal_LR_Unadj    = ProbChiSq;
    if ( Test = "Score" )            then pValueGlobal_Score_Unadj = ProbChiSq;
    if ( Test = "Wald" )             then pValueGlobal_Wald_Unadj  = ProbChiSq;

    *** Output line.;
    if ( last._PERMUTATION_ ) then output;
    label pValueGlobal_LR_Unadj    = "Likelihood Ratio : Testing Global Null Hypothesis: BETA=0 : Pr > ChiSq : Unadjusted"
          pValueGlobal_Score_Unadj = "Score : Testing Global Null Hypothesis: BETA=0 : Pr > ChiSq : Unadjusted"
          pValueGlobal_Wald_Unadj  = "Wald : Testing Global Null Hypothesis: BETA=0 : Pr > ChiSq : Unadjusted";

    keep _PERMUTATION_ pValueGlobal_LR_Unadj pValueGlobal_Score_Unadj pValueGlobal_Wald_Unadj;
run;

data ParameterEstimates_UnAdj_wide;
    length _PERMUTATION_ 8.;
    retain HR_000_Unadj LCL_000_Unadj UCL_000_Unadj HR_001_Unadj LCL_001_Unadj UCL_001_Unadj HR_010_Unadj LCL_010_Unadj UCL_010_Unadj
           HR_100_Unadj LCL_100_Unadj UCL_100_Unadj HR_101_Unadj LCL_101_Unadj UCL_101_Unadj HR_110_Unadj LCL_110_Unadj UCL_110_Unadj HR_111_Unadj LCL_111_Unadj UCL_111_Unadj;
    set ParameterEstimates_UnAdj_tall;
    by _PERMUTATION_;

    *** Initialize.;
    if ( first._PERMUTATION_ ) then do;
        HR_000_Unadj = .; LCL_000_Unadj= .; UCL_000_Unadj= .;
        HR_001_Unadj = .; LCL_001_Unadj= .; UCL_001_Unadj= .;
        HR_010_Unadj = .; LCL_010_Unadj= .; UCL_010_Unadj= .;
        HR_100_Unadj = .; LCL_100_Unadj= .; UCL_100_Unadj= .;
        HR_101_Unadj = .; LCL_101_Unadj= .; UCL_101_Unadj= .;
        HR_110_Unadj = .; LCL_110_Unadj= .; UCL_110_Unadj= .;
        HR_111_Unadj = .; LCL_111_Unadj= .; UCL_111_Unadj= .;
    end;

    *** Set values.;
    if ( Parameter = "Intercourse000" ) then do;
        HR_000_Unadj = HazardRatio; LCL_000_Unadj= HRLowerCL; UCL_000_Unadj= HRUpperCL;
	end;
    if ( Parameter = "Intercourse001" ) then do;
        HR_001_Unadj = HazardRatio; LCL_001_Unadj= HRLowerCL; UCL_001_Unadj= HRUpperCL;
	end;
    if ( Parameter = "Intercourse010" ) then do;
        HR_010_Unadj = HazardRatio; LCL_010_Unadj= HRLowerCL; UCL_010_Unadj= HRUpperCL;
    end;
    if ( Parameter = "Intercourse100" ) then do;
        HR_100_Unadj = HazardRatio; LCL_100_Unadj= HRLowerCL; UCL_100_Unadj= HRUpperCL;
	end;
    if ( Parameter = "Intercourse101" ) then do;
        HR_101_Unadj = HazardRatio; LCL_101_Unadj= HRLowerCL; UCL_101_Unadj= HRUpperCL;
	end;
    if ( Parameter = "Intercourse110" ) then do;
        HR_110_Unadj = HazardRatio; LCL_110_Unadj= HRLowerCL; UCL_110_Unadj= HRUpperCL;
    end;
    if ( Parameter = "Intercourse111" ) then do;
        HR_111_Unadj = HazardRatio; LCL_111_Unadj= HRLowerCL; UCL_111_Unadj= HRUpperCL;
    end;

    *** Output line.;
    if ( last._PERMUTATION_ ) then output;
    label HR_000_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 000"
          LCL_000_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 000 : Unadjusted"
          UCL_000_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 000 : Unadjusted"
          HR_001_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 001 : Unadjusted"
          LCL_001_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 001 : Unadjusted"
          UCL_001_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 001 : Unadjusted"
          HR_010_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 010 : Unadjusted"
          LCL_010_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 010 : Unadjusted"
          UCL_010_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 010 : Unadjusted"
          HR_100_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 100"
          LCL_100_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 100 : Unadjusted"
          UCL_100_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 100 : Unadjusted"
          HR_101_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 101 : Unadjusted"
          LCL_101_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 101 : Unadjusted"
          UCL_101_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 101 : Unadjusted"
          HR_110_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 110 : Unadjusted"
          LCL_110_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 110 : Unadjusted"
          UCL_110_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 110 : Unadjusted"
          HR_111_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 111 : Unadjusted"
          LCL_111_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 111 : Unadjusted"
          UCL_111_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 111 : Unadjusted";

    keep _PERMUTATION_
         HR_000_Unadj LCL_000_Unadj UCL_000_Unadj HR_001_Unadj LCL_001_Unadj UCL_001_Unadj HR_010_Unadj LCL_010_Unadj UCL_010_Unadj
         HR_100_Unadj LCL_100_Unadj UCL_100_Unadj HR_101_Unadj LCL_101_Unadj UCL_101_Unadj HR_110_Unadj LCL_110_Unadj UCL_110_Unadj HR_111_Unadj LCL_111_Unadj UCL_111_Unadj;
run;

data Nobs_Unadj;
    set Nobs_Unadj(keep=_PERMUTATION_ NObsUsed);
	rename NObsUsed = NObsUsed_Unadj;
	label  NObsUsed = "Number of Observations Used : Unadjusted";
run;

*** Merge results.;
data Results_Unadj;
     merge Nobs_Unadj GlobalTests_UnAdj_wide ParameterEstimates_UnAdj_wide;
	 by _PERMUTATION_;
run;

*** Delete temporary data set(s).;
proc datasets nolist;
    delete Nobs_Unadj GlobalTests_UnAdj_tall ParameterEstimates_UnAdj_tall GlobalTests_UnAdj_wide ParameterEstimates_UnAdj_wide;
run;
quit;

***************************************;
*** Adjusted.
***************************************;

data GlobalTests_Adj_wide;
    length _PERMUTATION_ 8.;
    retain pValueGlobal_LR_Adj pValueGlobal_Score_Adj pValueGlobal_Wald_Adj;
    set GlobalTests_Adj_tall;
    by _PERMUTATION_;

    *** Initialize.;
    if ( first._PERMUTATION_ ) then do;
        pValueGlobal_LR_Adj    = .;
        pValueGlobal_Score_Adj = .;
        pValueGlobal_Wald_Adj  = .;
    end;

    *** Set values.;
    if ( Test = "Likelihood Ratio" ) then pValueGlobal_LR_Adj    = ProbChiSq;
    if ( Test = "Score" )            then pValueGlobal_Score_Adj = ProbChiSq;
    if ( Test = "Wald" )             then pValueGlobal_Wald_Adj  = ProbChiSq;

    *** Output line.;
    if ( last._PERMUTATION_ ) then output;
    label pValueGlobal_LR_Adj    = "Likelihood Ratio : Testing Global Null Hypothesis: BETA=0 : Pr > ChiSq : Adjusted"
          pValueGlobal_Score_Adj = "Score : Testing Global Null Hypothesis: BETA=0 : Pr > ChiSq : Adjusted"
          pValueGlobal_Wald_Adj  = "Wald : Testing Global Null Hypothesis: BETA=0 : Pr > ChiSq : Adjusted";

    keep _PERMUTATION_ pValueGlobal_LR_Adj pValueGlobal_Score_Adj pValueGlobal_Wald_Adj;
run;

data ParameterEstimates_Adj_wide;
    length _PERMUTATION_ 8.;
    retain HR_000_Unadj LCL_000_Unadj UCL_000_Unadj HR_001_Unadj LCL_001_Unadj UCL_001_Unadj HR_010_Unadj LCL_010_Unadj UCL_010_Unadj
           HR_100_Unadj LCL_100_Unadj UCL_100_Unadj HR_101_Unadj LCL_101_Unadj UCL_101_Unadj HR_110_Unadj LCL_110_Unadj UCL_110_Unadj HR_111_Unadj LCL_111_Unadj UCL_111_Unadj
           HR_EducationCat_m_Adj LCL_EducationCat_m_Adj UCL_EducationCat_m_Adj
           HR_bmiCat1_f_Adj       LCL_bmiCat1_f_Adj       UCL_bmiCat1_f_Adj
           HR_bmiCat2_f_Adj       LCL_bmiCat2_f_Adj       UCL_bmiCat2_f_Adj
           HR_bmiCat1_m_Adj       LCL_bmiCat1_m_Adj       UCL_bmiCat1_m_Adj
           HR_bmiCat2_m_Adj       LCL_bmiCat2_m_Adj       UCL_bmiCat2_m_Adj
           HR_Age_AVG_Adj         LCL_Age_AVG_Adj         UCL_Age_AVG_Adj
           HR_Age_DIFF_Adj        LCL_Age_DIFF_Adj        UCL_Age_DIFF_Adj;
    set ParameterEstimates_Adj_tall;
    by _PERMUTATION_;

    *** Initialize.;
    if ( first._PERMUTATION_ ) then do;
        HR_000_Unadj = .; LCL_000_Unadj= .; UCL_000_Unadj= .;
        HR_001_Unadj = .; LCL_001_Unadj= .; UCL_001_Unadj= .;
        HR_010_Unadj = .; LCL_010_Unadj= .; UCL_010_Unadj= .;
        HR_100_Unadj = .; LCL_100_Unadj= .; UCL_100_Unadj= .;
        HR_101_Unadj = .; LCL_101_Unadj= .; UCL_101_Unadj= .;
        HR_110_Unadj = .; LCL_110_Unadj= .; UCL_110_Unadj= .;
        HR_111_Unadj = .; LCL_111_Unadj= .; UCL_111_Unadj= .;
        HR_EducationCat_m_Adj = .; LCL_EducationCat_m_Adj= .; UCL_EducationCat_m_Adj= .;
        HR_bmiCat1_f_Adj = .;      LCL_bmiCat1_f_Adj= .;      UCL_bmiCat1_f_Adj= .;
        HR_bmiCat2_f_Adj = .;      LCL_bmiCat2_f_Adj= .;      UCL_bmiCat2_f_Adj= .;
        HR_bmiCat1_m_Adj = .;      LCL_bmiCat1_m_Adj= .;      UCL_bmiCat1_m_Adj= .;
        HR_bmiCat2_m_Adj = .;      LCL_bmiCat2_m_Adj= .;      UCL_bmiCat2_m_Adj= .;
        HR_Age_AVG_Adj = .;        LCL_Age_AVG_Adj= .;        UCL_Age_AVG_Adj= .;
        HR_Age_DIFF_Adj = .;       LCL_Age_DIFF_Adj= .;       UCL_Age_DIFF_Adj= .;
    end;

    *** Set values.;
    if ( Parameter = "Intercourse000" ) then do;
        HR_000_Unadj = HazardRatio; LCL_000_Unadj= HRLowerCL; UCL_000_Unadj= HRUpperCL;
	end;
    if ( Parameter = "Intercourse001" ) then do;
        HR_001_Unadj = HazardRatio; LCL_001_Unadj= HRLowerCL; UCL_001_Unadj= HRUpperCL;
	end;
    if ( Parameter = "Intercourse010" ) then do;
        HR_010_Unadj = HazardRatio; LCL_010_Unadj= HRLowerCL; UCL_010_Unadj= HRUpperCL;
    end;
    if ( Parameter = "Intercourse100" ) then do;
        HR_100_Unadj = HazardRatio; LCL_100_Unadj= HRLowerCL; UCL_100_Unadj= HRUpperCL;
	end;
    if ( Parameter = "Intercourse101" ) then do;
        HR_101_Unadj = HazardRatio; LCL_101_Unadj= HRLowerCL; UCL_101_Unadj= HRUpperCL;
	end;
    if ( Parameter = "Intercourse110" ) then do;
        HR_110_Unadj = HazardRatio; LCL_110_Unadj= HRLowerCL; UCL_110_Unadj= HRUpperCL;
    end;
    if ( Parameter = "Intercourse111" ) then do;
        HR_111_Unadj = HazardRatio; LCL_111_Unadj= HRLowerCL; UCL_111_Unadj= HRUpperCL;
    end;
    if ( Parameter = "EducationCat_m" ) then do;
        HR_EducationCat_m_Adj = HazardRatio; LCL_EducationCat_m_Adj= HRLowerCL; UCL_EducationCat_m_Adj= HRUpperCL;
    end;
    if ( ( Parameter = "bmiCat_f" ) AND ( ClassVal0 = "Overweight 25.0 – 29.9" ) ) then do;
        HR_bmiCat1_f_Adj = HazardRatio; LCL_bmiCat1_f_Adj= HRLowerCL; UCL_bmiCat1_f_Adj= HRUpperCL;
    end;
    if ( ( Parameter = "bmiCat_m" ) AND ( ClassVal0 = "Overweight 25.0 – 29.9" ) ) then do;
        HR_bmiCat1_m_Adj = HazardRatio; LCL_bmiCat1_m_Adj= HRLowerCL; UCL_bmiCat1_m_Adj= HRUpperCL;
    end;
    if ( ( Parameter = "bmiCat_f" ) AND ( ClassVal0 = "Obese >= 30" ) ) then do;
        HR_bmiCat2_f_Adj = HazardRatio; LCL_bmiCat2_f_Adj= HRLowerCL; UCL_bmiCat2_f_Adj= HRUpperCL;
    end;
    if ( ( Parameter = "bmiCat_m" ) AND ( ClassVal0 = "Obese >= 30" ) ) then do;
        HR_bmiCat2_m_Adj = HazardRatio; LCL_bmiCat2_m_Adj= HRLowerCL; UCL_bmiCat2_m_Adj= HRUpperCL;
    end;
    if ( Parameter = "Age_AVG" ) then do;
        HR_Age_AVG_Adj = HazardRatio; LCL_Age_AVG_Adj= HRLowerCL; UCL_Age_AVG_Adj= HRUpperCL;
    end;
    if ( Parameter = "Age_DIFF" ) then do;
        HR_Age_DIFF_Adj = HazardRatio; LCL_Age_DIFF_Adj= HRLowerCL; UCL_Age_DIFF_Adj= HRUpperCL;
    end;

    *** Output line.;
    if ( last._PERMUTATION_ ) then output;
    label HR_000_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 000"
          LCL_000_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 000 : Unadjusted"
          UCL_000_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 000 : Unadjusted"
          HR_001_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 001 : Unadjusted"
          LCL_001_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 001 : Unadjusted"
          UCL_001_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 001 : Unadjusted"
          HR_010_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 010 : Unadjusted"
          LCL_010_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 010 : Unadjusted"
          UCL_010_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 010 : Unadjusted"
          HR_100_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 100"
          LCL_100_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 100 : Unadjusted"
          UCL_100_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 100 : Unadjusted"
          HR_101_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 101 : Unadjusted"
          LCL_101_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 101 : Unadjusted"
          UCL_101_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 101 : Unadjusted"
          HR_110_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 110 : Unadjusted"
          LCL_110_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 110 : Unadjusted"
          UCL_110_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 110 : Unadjusted"
          HR_111_Unadj  = "Hazard Ratio : Two-Day Intercourse Pattern 111 : Unadjusted"
          LCL_111_Unadj = "95% Lower Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 111 : Unadjusted"
          UCL_111_Unadj = "95% Upper Confidence Limit for Hazard Ratio : Two-Day Intercourse Pattern 111 : Unadjusted"
          HR_EducationCat_m_Adj  = "Hazard Ratio : Education (Male, Dichotomized) : Adjusted"
          LCL_EducationCat_m_Adj = "95% Lower Confidence Limit for Hazard Ratio : Education (Male, Dichotomized) : Adjusted"
          UCL_EducationCat_m_Adj = "95% Upper Confidence Limit for Hazard Ratio : Education (Male, Dichotomized) : Adjusted"
          HR_bmiCat1_f_Adj  = "Hazard Ratio : BMI (Females, categorical) Overweight 25.0 – 29.9 : Adjusted"
          LCL_bmiCat1_f_Adj = "95% Lower Confidence Limit for Hazard Ratio : BMI (Females, categorical) Overweight 25.0 – 29.9 : Adjusted"
          UCL_bmiCat1_f_Adj = "95% Upper Confidence Limit for Hazard Ratio : BMI (Females, categorical) Overweight 25.0 – 29.9 : Adjusted"
          HR_bmiCat1_m_Adj  = "Hazard Ratio : BMI (Males, categorical) Overweight 25.0 – 29.9 : Adjusted"
          LCL_bmiCat1_m_Adj = "95% Lower Confidence Limit for Hazard Ratio : BMI (Males, categorical) Overweight 25.0 – 29.9 : Adjusted"
          UCL_bmiCat1_m_Adj = "95% Upper Confidence Limit for Hazard Ratio : BMI (Males, categorical) Overweight 25.0 – 29.9 : Adjusted"
          HR_bmiCat2_f_Adj  = "Hazard Ratio : BMI (Females, categorical) Obese >= 30 : Adjusted"
          LCL_bmiCat2_f_Adj = "95% Lower Confidence Limit for Hazard Ratio : BMI (Females, categorical) Obese >= 30 : Adjusted"
          UCL_bmiCat2_f_Adj = "95% Upper Confidence Limit for Hazard Ratio : BMI (Females, categorical) Obese >= 30 : Adjusted"
          HR_bmiCat2_m_Adj  = "Hazard Ratio : BMI (Males, categorical) Obese >= 30 : Adjusted"
          LCL_bmiCat2_m_Adj = "95% Lower Confidence Limit for Hazard Ratio : BMI (Males, categorical) Obese >= 30 : Adjusted"
          UCL_bmiCat2_m_Adj = "95% Upper Confidence Limit for Hazard Ratio : BMI (Males, categorical) Obese >= 30 : Adjusted"
          HR_Age_AVG_Adj  = "Hazard Ratio : Average age between male and female : Adjusted"
          LCL_Age_AVG_Adj = "95% Lower Confidence Limit for Hazard Ratio : Average age between male and female : Adjusted"
          UCL_Age_AVG_Adj = "95% Upper Confidence Limit for Hazard Ratio : Average age between male and female : Adjusted"
          HR_Age_DIFF_Adj  = "Hazard Ratio : Age difference between male and female : Adjusted"
          LCL_Age_DIFF_Adj = "95% Lower Confidence Limit for Hazard Ratio : Age difference between male and female : Adjusted"
          UCL_Age_DIFF_Adj = "95% Upper Confidence Limit for Hazard Ratio : Age difference between male and female : Adjusted";

    keep _PERMUTATION_
         HR_000_Unadj LCL_000_Unadj UCL_000_Unadj HR_001_Unadj LCL_001_Unadj UCL_001_Unadj HR_010_Unadj LCL_010_Unadj UCL_010_Unadj
         HR_100_Unadj LCL_100_Unadj UCL_100_Unadj HR_101_Unadj LCL_101_Unadj UCL_101_Unadj HR_110_Unadj LCL_110_Unadj UCL_110_Unadj HR_111_Unadj LCL_111_Unadj UCL_111_Unadj
         HR_EducationCat_m_Adj LCL_EducationCat_m_Adj UCL_EducationCat_m_Adj
         HR_bmiCat1_f_Adj       LCL_bmiCat1_f_Adj       UCL_bmiCat1_f_Adj
         HR_bmiCat2_f_Adj       LCL_bmiCat2_f_Adj       UCL_bmiCat2_f_Adj
         HR_bmiCat1_m_Adj       LCL_bmiCat1_m_Adj       UCL_bmiCat1_m_Adj
         HR_bmiCat2_m_Adj       LCL_bmiCat2_m_Adj       UCL_bmiCat2_m_Adj
         HR_Age_AVG_Adj         LCL_Age_AVG_Adj         UCL_Age_AVG_Adj
         HR_Age_DIFF_Adj        LCL_Age_DIFF_Adj        UCL_Age_DIFF_Adj;
run;

data Nobs_Adj;
    set Nobs_Adj(keep=_PERMUTATION_ NObsUsed);
	rename NObsUsed = NObsUsed_Adj;
	label  NObsUsed = "Number of Observations Used : Adjusted";
run;

*** Merge results.;
data Results_Adj;
     merge Nobs_Adj GlobalTests_Adj_wide ParameterEstimates_Adj_wide;
	 by _PERMUTATION_;
run;

*** Delete temporary data set(s).;
proc datasets nolist;
    delete Nobs_Adj GlobalTests_Adj_tall ParameterEstimates_Adj_tall GlobalTests_Adj_wide ParameterEstimates_Adj_wide;
run;
quit;

******************************************************************************;
******************************************************************************;
*** Write to disk.
******************************************************************************;
******************************************************************************;

***************************************;
*** Unadjusted.
***************************************;

*** SAS data file format.;
data outlib.Permutation_3DIP_Unadj_&VERSION._&DATESTR;
    set Results_Unadj;
run;

*** CSV format.;
proc export data=Results_Unadj replace label
    outfile="&PATTERN_FOLDER/&OUTPUT_FOLDER/Permutation.3DayIP.Unadj.&VERSION..&DATESTR..csv"
    dbms=csv;
run;

***************************************;
*** Adjusted.
***************************************;

*** SAS data file format.;
data outlib.Permutation_3DIP_Adj_&VERSION._&DATESTR;
    set Results_Adj;
run;

*** CSV format.;
proc export data=Results_Adj replace label
    outfile="&PATTERN_FOLDER/&OUTPUT_FOLDER/Permutation.3DayIP.Adj.&VERSION..&DATESTR..csv"
    dbms=csv;
run;
